
package lifetime.roles;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;


/**
 * The Platform API to manage IT roles: roles created in the platform. The authenticated user needs to have 'Manage Infrastructure' permissions in the platform to use this API.
 * To use this API you need to send an authentication argument with username/password, or use the AuthenticationService Web Service API to acquire a session token to send as argument.
 * 
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "RoleManagementService", targetNamespace = "http://LifeTimeServices/RoleManagementService/", wsdlLocation = "http://outsystemscloud/LifeTimeServices/RoleManagementService.asmx?WSDL")
public class RoleManagementService
    extends Service
{

    private final static URL ROLEMANAGEMENTSERVICE_WSDL_LOCATION;
    private final static Logger logger = Logger.getLogger(lifetime.roles.RoleManagementService.class.getName());

    static {
        URL url = null;
        try {
            URL baseUrl;
            baseUrl = lifetime.roles.RoleManagementService.class.getResource(".");
            url = new URL(baseUrl, "http://outsystemscloud/LifeTimeServices/RoleManagementService.asmx?WSDL");
        } catch (MalformedURLException e) {
            logger.warning("Failed to create URL for the wsdl Location: 'http://outsystemscloud/LifeTimeServices/RoleManagementService.asmx?WSDL', retrying as a local file");
            logger.warning(e.getMessage());
        }
        ROLEMANAGEMENTSERVICE_WSDL_LOCATION = url;
    }

    public RoleManagementService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public RoleManagementService() {
        super(ROLEMANAGEMENTSERVICE_WSDL_LOCATION, new QName("http://LifeTimeServices/RoleManagementService/", "RoleManagementService"));
    }

    /**
     * 
     * @return
     *     returns RoleManagementServiceSoap
     */
    @WebEndpoint(name = "RoleManagementServiceSoap")
    public RoleManagementServiceSoap getRoleManagementServiceSoap() {
        return super.getPort(new QName("http://LifeTimeServices/RoleManagementService/", "RoleManagementServiceSoap"), RoleManagementServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns RoleManagementServiceSoap
     */
    @WebEndpoint(name = "RoleManagementServiceSoap")
    public RoleManagementServiceSoap getRoleManagementServiceSoap(WebServiceFeature... features) {
        return super.getPort(new QName("http://LifeTimeServices/RoleManagementService/", "RoleManagementServiceSoap"), RoleManagementServiceSoap.class, features);
    }

    /**
     * 
     * @return
     *     returns RoleManagementServiceSoap
     */
    @WebEndpoint(name = "RoleManagementServiceSoap12")
    public RoleManagementServiceSoap getRoleManagementServiceSoap12() {
        return super.getPort(new QName("http://LifeTimeServices/RoleManagementService/", "RoleManagementServiceSoap12"), RoleManagementServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns RoleManagementServiceSoap
     */
    @WebEndpoint(name = "RoleManagementServiceSoap12")
    public RoleManagementServiceSoap getRoleManagementServiceSoap12(WebServiceFeature... features) {
        return super.getPort(new QName("http://LifeTimeServices/RoleManagementService/", "RoleManagementServiceSoap12"), RoleManagementServiceSoap.class, features);
    }

}
