
package lifetime.users;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Holder;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebService(name = "UserManagementServiceSoap", targetNamespace = "http://LifeTimeServices/UserManagementService/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface UserManagementServiceSoap {


    /**
     * Changes the password of a platform user.
     * 
     * @param username
     * @param status
     * @param newPassword
     * @param authentication
     * @param encryptPassword
     * @param success
     */
    @WebMethod(operationName = "User_ChangePassword", action = "http://LifeTimeServices/UserManagementService/User_ChangePassword")
    @RequestWrapper(localName = "User_ChangePassword", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserChangePassword")
    @ResponseWrapper(localName = "User_ChangePasswordResponse", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserChangePasswordResponse")
    public void userChangePassword(
        @WebParam(name = "Authentication", targetNamespace = "http://www.outsystems.com")
        WebServiceSimpleAuthentication authentication,
        @WebParam(name = "Username", targetNamespace = "http://www.outsystems.com")
        String username,
        @WebParam(name = "NewPassword", targetNamespace = "http://www.outsystems.com")
        String newPassword,
        @WebParam(name = "EncryptPassword", targetNamespace = "http://www.outsystems.com")
        boolean encryptPassword,
        @WebParam(name = "Success", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<Boolean> success,
        @WebParam(name = "Status", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<APIStatus> status);

    /**
     * Deletes the permission a platform user has for a specific application. After executing this operation, the user permissions for the application are defined by the platform roles the platform user has.
     * 
     * @param username
     * @param status
     * @param authentication
     * @param applicationKey
     * @param success
     */
    @WebMethod(operationName = "User_DeleteApplicationPermission", action = "http://LifeTimeServices/UserManagementService/User_DeleteApplicationPermission")
    @RequestWrapper(localName = "User_DeleteApplicationPermission", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserDeleteApplicationPermission")
    @ResponseWrapper(localName = "User_DeleteApplicationPermissionResponse", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserDeleteApplicationPermissionResponse")
    public void userDeleteApplicationPermission(
        @WebParam(name = "Authentication", targetNamespace = "http://www.outsystems.com")
        WebServiceSimpleAuthentication authentication,
        @WebParam(name = "Username", targetNamespace = "http://www.outsystems.com")
        String username,
        @WebParam(name = "ApplicationKey", targetNamespace = "http://www.outsystems.com")
        String applicationKey,
        @WebParam(name = "Success", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<Boolean> success,
        @WebParam(name = "Status", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<APIStatus> status);

    /**
     * Returns the permissions a platform user has over each existing application and the permissions of her platform role, in each environment of the infrastructure.
     * 
     * @param username
     * @param status
     * @param authentication
     * @param applicationPermissions
     * @param platformRolePermissions
     * @param success
     */
    @WebMethod(operationName = "User_GetAllPermissions", action = "http://LifeTimeServices/UserManagementService/User_GetAllPermissions")
    @RequestWrapper(localName = "User_GetAllPermissions", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserGetAllPermissions")
    @ResponseWrapper(localName = "User_GetAllPermissionsResponse", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserGetAllPermissionsResponse")
    public void userGetAllPermissions(
        @WebParam(name = "Authentication", targetNamespace = "http://www.outsystems.com")
        WebServiceSimpleAuthentication authentication,
        @WebParam(name = "Username", targetNamespace = "http://www.outsystems.com")
        String username,
        @WebParam(name = "Success", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<Boolean> success,
        @WebParam(name = "Status", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<APIStatus> status,
        @WebParam(name = "ApplicationPermissions", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<ArrayOfWORCApplicationShortInfoApplicationPermissionsRecord> applicationPermissions,
        @WebParam(name = "PlatformRolePermissions", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<ApplicationPermissions> platformRolePermissions);

    /**
     * [DEPRECATED] Use User_SetApplicationRole. Updates the permission a platform user has for an application running on a given environment.
     * 
     * @param username
     * @param status
     * @param authentication
     * @param applicationKey
     * @param permissionLevelId
     * @param environmentKey
     * @param success
     */
    @WebMethod(operationName = "User_UpdateApplicationPermission", action = "http://LifeTimeServices/UserManagementService/User_UpdateApplicationPermission")
    @RequestWrapper(localName = "User_UpdateApplicationPermission", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserUpdateApplicationPermission")
    @ResponseWrapper(localName = "User_UpdateApplicationPermissionResponse", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserUpdateApplicationPermissionResponse")
    public void userUpdateApplicationPermission(
        @WebParam(name = "Authentication", targetNamespace = "http://www.outsystems.com")
        WebServiceSimpleAuthentication authentication,
        @WebParam(name = "Username", targetNamespace = "http://www.outsystems.com")
        String username,
        @WebParam(name = "ApplicationKey", targetNamespace = "http://www.outsystems.com")
        String applicationKey,
        @WebParam(name = "EnvironmentKey", targetNamespace = "http://www.outsystems.com")
        String environmentKey,
        @WebParam(name = "PermissionLevelId", targetNamespace = "http://www.outsystems.com")
        int permissionLevelId,
        @WebParam(name = "Success", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<Boolean> success,
        @WebParam(name = "Status", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<APIStatus> status);

    /**
     * Updates the role a platform user has for an application with the given key.
     * 
     * @param username
     * @param status
     * @param authentication
     * @param applicationKey
     * @param roleName
     * @param success
     */
    @WebMethod(operationName = "User_SetApplicationRole", action = "http://LifeTimeServices/UserManagementService/User_SetApplicationRole")
    @RequestWrapper(localName = "User_SetApplicationRole", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserSetApplicationRole")
    @ResponseWrapper(localName = "User_SetApplicationRoleResponse", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserSetApplicationRoleResponse")
    public void userSetApplicationRole(
        @WebParam(name = "Authentication", targetNamespace = "http://www.outsystems.com")
        WebServiceSimpleAuthentication authentication,
        @WebParam(name = "Username", targetNamespace = "http://www.outsystems.com")
        String username,
        @WebParam(name = "ApplicationKey", targetNamespace = "http://www.outsystems.com")
        String applicationKey,
        @WebParam(name = "RoleName", targetNamespace = "http://www.outsystems.com")
        String roleName,
        @WebParam(name = "Success", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<Boolean> success,
        @WebParam(name = "Status", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<APIStatus> status);

    /**
     * Deactivates a user in the platform. The user stops having access to all operations that require authentication.
     * 
     * @param username
     * @param status
     * @param authentication
     * @param success
     */
    @WebMethod(operationName = "User_SetInactive", action = "http://LifeTimeServices/UserManagementService/User_SetInactive")
    @RequestWrapper(localName = "User_SetInactive", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserSetInactive")
    @ResponseWrapper(localName = "User_SetInactiveResponse", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserSetInactiveResponse")
    public void userSetInactive(
        @WebParam(name = "Authentication", targetNamespace = "http://www.outsystems.com")
        WebServiceSimpleAuthentication authentication,
        @WebParam(name = "Username", targetNamespace = "http://www.outsystems.com")
        String username,
        @WebParam(name = "Success", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<Boolean> success,
        @WebParam(name = "Status", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<APIStatus> status);

    /**
     * Returns the permissions a platform user has over an application, in each environment of the infrastructure, or the permissions from her platform role in case of specific permissions for the application were not specified.
     * 
     * @param username
     * @param status
     * @param authentication
     * @param applicationKey
     * @param applicationPermissions
     * @param arePlatformRolePermissions
     * @param success
     */
    @WebMethod(operationName = "User_GetApplicationPermissions", action = "http://LifeTimeServices/UserManagementService/User_GetApplicationPermissions")
    @RequestWrapper(localName = "User_GetApplicationPermissions", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserGetApplicationPermissions")
    @ResponseWrapper(localName = "User_GetApplicationPermissionsResponse", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserGetApplicationPermissionsResponse")
    public void userGetApplicationPermissions(
        @WebParam(name = "Authentication", targetNamespace = "http://www.outsystems.com")
        WebServiceSimpleAuthentication authentication,
        @WebParam(name = "Username", targetNamespace = "http://www.outsystems.com")
        String username,
        @WebParam(name = "ApplicationKey", targetNamespace = "http://www.outsystems.com")
        String applicationKey,
        @WebParam(name = "Success", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<Boolean> success,
        @WebParam(name = "Status", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<APIStatus> status,
        @WebParam(name = "ArePlatformRolePermissions", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<Boolean> arePlatformRolePermissions,
        @WebParam(name = "ApplicationPermissions", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<ApplicationPermissions> applicationPermissions);

    /**
     * Activates a user in the platform, restoring all permissions the platform user has associated.
     * 
     * @param username
     * @param status
     * @param authentication
     * @param success
     */
    @WebMethod(operationName = "User_SetActive", action = "http://LifeTimeServices/UserManagementService/User_SetActive")
    @RequestWrapper(localName = "User_SetActive", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserSetActive")
    @ResponseWrapper(localName = "User_SetActiveResponse", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserSetActiveResponse")
    public void userSetActive(
        @WebParam(name = "Authentication", targetNamespace = "http://www.outsystems.com")
        WebServiceSimpleAuthentication authentication,
        @WebParam(name = "Username", targetNamespace = "http://www.outsystems.com")
        String username,
        @WebParam(name = "Success", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<Boolean> success,
        @WebParam(name = "Status", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<APIStatus> status);

    /**
     * Create a new platform user or updates a platform user that already exists.
     * 
     * @param username
     * @param status
     * @param email
     * @param authentication
     * @param name
     * @param encryptPassword
     * @param platformUser
     * @param roleName
     * @param success
     * @param password
     */
    @WebMethod(operationName = "User_CreateOrUpdate", action = "http://LifeTimeServices/UserManagementService/User_CreateOrUpdate")
    @RequestWrapper(localName = "User_CreateOrUpdate", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserCreateOrUpdate")
    @ResponseWrapper(localName = "User_CreateOrUpdateResponse", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserCreateOrUpdateResponse")
    public void userCreateOrUpdate(
        @WebParam(name = "Authentication", targetNamespace = "http://www.outsystems.com")
        WebServiceSimpleAuthentication authentication,
        @WebParam(name = "Username", targetNamespace = "http://www.outsystems.com")
        String username,
        @WebParam(name = "Password", targetNamespace = "http://www.outsystems.com")
        String password,
        @WebParam(name = "EncryptPassword", targetNamespace = "http://www.outsystems.com")
        boolean encryptPassword,
        @WebParam(name = "Name", targetNamespace = "http://www.outsystems.com")
        String name,
        @WebParam(name = "Email", targetNamespace = "http://www.outsystems.com")
        String email,
        @WebParam(name = "RoleName", targetNamespace = "http://www.outsystems.com")
        String roleName,
        @WebParam(name = "Success", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<Boolean> success,
        @WebParam(name = "Status", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<APIStatus> status,
        @WebParam(name = "PlatformUser", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<PlatformUser> platformUser);

    /**
     * Changes the username of a platform user.
     * 
     * @param newUsername
     * @param status
     * @param authentication
     * @param oldUsername
     * @param success
     */
    @WebMethod(operationName = "User_ChangeUsername", action = "http://LifeTimeServices/UserManagementService/User_ChangeUsername")
    @RequestWrapper(localName = "User_ChangeUsername", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserChangeUsername")
    @ResponseWrapper(localName = "User_ChangeUsernameResponse", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserChangeUsernameResponse")
    public void userChangeUsername(
        @WebParam(name = "Authentication", targetNamespace = "http://www.outsystems.com")
        WebServiceSimpleAuthentication authentication,
        @WebParam(name = "OldUsername", targetNamespace = "http://www.outsystems.com")
        String oldUsername,
        @WebParam(name = "NewUsername", targetNamespace = "http://www.outsystems.com")
        String newUsername,
        @WebParam(name = "Success", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<Boolean> success,
        @WebParam(name = "Status", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<APIStatus> status);

    /**
     * Returns the list of platform users, with their information, such as username, email and platform role.
     * 
     * @param platformUsers
     * @param showInactive
     * @param status
     * @param authentication
     * @param success
     */
    @WebMethod(operationName = "User_List", action = "http://LifeTimeServices/UserManagementService/User_List")
    @RequestWrapper(localName = "User_List", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserList")
    @ResponseWrapper(localName = "User_ListResponse", targetNamespace = "http://www.outsystems.com", className = "lifetime.users.UserListResponse")
    public void userList(
        @WebParam(name = "Authentication", targetNamespace = "http://www.outsystems.com")
        WebServiceSimpleAuthentication authentication,
        @WebParam(name = "ShowInactive", targetNamespace = "http://www.outsystems.com")
        boolean showInactive,
        @WebParam(name = "Success", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<Boolean> success,
        @WebParam(name = "Status", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<APIStatus> status,
        @WebParam(name = "PlatformUsers", targetNamespace = "http://www.outsystems.com", mode = WebParam.Mode.OUT)
        Holder<ArrayOfPlatformUser> platformUsers);

}
